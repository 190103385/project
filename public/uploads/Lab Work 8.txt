--TASK 1
CREATE OR REPLACE FUNCTION ins_upd_users
(
    p_id IN users.id%TYPE,
    p_name IN users.name%TYPE,
    p_birthdate IN users.birthdate%TYPE,
    p_isactive IN users.isactive%TYPE
)
RETURN NUMBER IS
    return_id NUMBER ;
    
    v_user users%ROWTYPE;
    v_id NUMBER;
BEGIN
    SELECT * INTO v_user FROM users
    WHERE id = p_id;
    
    UPDATE users
        SET name = p_name, birthdate = p_birthdate, isactive = p_isactive
        WHERE id = p_id AND
            EXISTS(SELECT * FROM users
                WHERE id = p_id);
    DBMS_OUTPUT.put_line('ID is not null');
    return_id := p_id;
    RETURN return_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        IF p_id IS NOT NULL THEN
            INSERT INTO users VALUES (p_id, p_name, p_birthdate, p_isactive);
            DBMS_OUTPUT.put_line('ID is not null, but exception caught');
            return_id := p_id;
            RETURN return_id;
        ELSE
            SELECT MAX(id) INTO v_id FROM users;
            INSERT INTO users VALUES ((v_id + 1), p_name, p_birthdate, p_isactive);
            DBMS_OUTPUT.PUT_LINE('ID is null');
            return_id := v_id+1;
            RETURN return_id;
        END IF;
END ins_upd_users;

DECLARE
    v_id users.id%TYPE;
BEGIN
    v_id := ins_upd_users(p_id => null, p_name => 'Nurdaulet', p_birthdate => '01-SEP-01', p_isactive => 1);
    DBMS_OUTPUT.put_line('User with index ' || v_id || ' succesfully inserted/updated');
END;


--TASK 2
CREATE OR REPLACE FUNCTION dep_avg_sal
(
    p_dep_id departments.department_id%TYPE
)
RETURN NUMBER IS
    v_avg_sal employees.salary%TYPE;
BEGIN
    SELECT AVG(salary) INTO v_avg_sal FROM employees
    WHERE department_id = p_dep_id;
    RETURN v_avg_sal * 12;
END;

DECLARE
    v_dep_id employees.department_id%TYPE := 10;
BEGIN
    DBMS_OUTPUT.put_line(dep_avg_sal(v_dep_id));
END;


--TASK 3
CREATE OR REPLACE FUNCTION sal_rat
(
    p_dep_name departments.department_name%TYPE
)
RETURN NUMBER IS
    v_sal_ratio NUMBER;
    v_emp_sal NUMBER;
    v_man_sal NUMBER;
BEGIN
    SELECT SUM(salary) INTO v_emp_sal FROM employees
    WHERE department_id = 
        (SELECT department_id FROM departments
         WHERE department_name = p_dep_name);
         
    SELECT SUM(salary) INTO v_man_sal FROM employees
    WHERE department_id = 
        (SELECT department_id FROM departments
         WHERE department_name = p_dep_name) AND
         employee_id IN (SELECT manager_id FROM departments);
         
    v_sal_ratio := v_emp_sal / v_man_sal;
    RETURN v_sal_ratio;
END;

DECLARE
    CURSOR c_salary_ratio IS SELECT department_name, sal_rat(department_name) as salary_ratio FROM departments;
BEGIN
    FOR i IN c_salary_ratio
    LOOP
        DBMS_OUTPUT.PUT_LINE(i.department_name || ' ' || i.salary_ratio);
    END LOOP;
END;


--TASK 4
CREATE OR REPLACE FUNCTION emp_work_exp
(
    p_id employees.employee_id%TYPE
)
RETURN NUMBER IS
    v_work_exp NUMBER;
    v_hire_date NUMBER;
BEGIN
    SELECT EXTRACT(YEAR FROM hire_date) INTO v_hire_date FROM employees
    WHERE employee_id = p_id;
    
    v_work_exp := EXTRACT(YEAR FROM SYSDATE) - v_hire_date;
    RETURN v_work_exp;
END;

DECLARE
    CURSOR c_work_exp IS SELECT first_name, last_name, emp_work_exp(employee_id) AS work_experience FROM employees
                         WHERE department_id = 90;
BEGIN
    FOR i IN c_work_exp
    LOOP
        DBMS_OUTPUT.PUT_LINE(i.first_name || ' ' || i.last_name || ' ' || i.work_experience);
    END LOOP;
END;